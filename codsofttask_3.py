# -*- coding: utf-8 -*-
"""codsofttask-3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1g8uhC5dWnuHKu3pDV4mVMBegjI7Vhjrr
"""

import pandas as pd
import numpy as np

# to visualize the dataset
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px

# To preprocess the data
from sklearn.preprocessing import StandardScaler, LabelEncoder, MinMaxScaler

# machine learning
from sklearn.model_selection import train_test_split, GridSearchCV, cross_val_score
#for classification tasks
from sklearn.linear_model import LogisticRegression
from sklearn.neighbors import KNeighborsClassifier
from sklearn.svm import SVC
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier, GradientBoostingClassifier, RandomForestRegressor
from xgboost import XGBClassifier

#metrics
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report, mean_absolute_error, mean_squared_error, r2_score

df = pd.read_csv("/content/IRIS.csv")

df.head(5)

df.info()

df.shape

df.columns

df.describe()

"""**sepal_length column**"""

sns.histplot(df['sepal_length'], kde=True)

sns.histplot(df['sepal_length'], kde=True)
plt.axvline(df['sepal_length'].mean(), color='red')
plt.axvline(df['sepal_length'].median(), color='green')
plt.axvline(df['sepal_length'].mode()[0], color='blue')

# print the value of mean, median and mode of sepal_length column
print('Mean:', df['sepal_length'].mean())
print('Median:', df['sepal_length'].median())
print('Mode:', df['sepal_length'].mode()[0])

fig = px.histogram(data_frame=df, x='sepal_length', color='species')
fig.show()

"""**sepal_width column**"""

sns.histplot(df['sepal_width'], kde=True)

sns.histplot(df['sepal_width'], kde=True)
plt.axvline(df['sepal_width'].mean(), color='red')
plt.axvline(df['sepal_width'].median(), color='green')
plt.axvline(df['sepal_width'].mode()[0], color='blue')

# print the value of mean, median and mode of sepal_width column
print('Mean:', df['sepal_width'].mean())
print('Median:', df['sepal_width'].median())
print('Mode:', df['sepal_width'].mode()[0])

fig = px.histogram(data_frame=df, x='sepal_width', color='species')
fig.show()

"""**petal_length column**"""

le_species = LabelEncoder()
df['species'] = le_species.fit_transform(df['species'])

scalar = MinMaxScaler()

# fit the scalar on data
scaled_df = scalar.fit_transform(df)
# convert this data into a pandas dataframe
scaled_df = pd.DataFrame(scaled_df, columns=df.columns)
scaled_df.head()

df['species'] = le_species.inverse_transform(df['species'])

sns.histplot(df['petal_length'], kde=True)

# plot the mean, median and mode of petal_length column using sns
sns.histplot(df['petal_length'], kde=True)
plt.axvline(df['petal_length'].mean(), color='red')
plt.axvline(df['petal_length'].median(), color='green')
plt.axvline(df['petal_length'].mode()[0], color='blue')

# print the value of mean, median and mode of petal_length column
print('Mean:', df['petal_length'].mean())
print('Median:', df['petal_length'].median())
print('Mode:', df['petal_length'].mode()[0])

fig = px.histogram(data_frame=df, x='petal_length', color='species')
fig.show()

"""**petal_width column**

"""

sns.histplot(df['petal_width'], kde=True)

# plot the mean, median and mode of petal_width column using sns
sns.histplot(df['petal_width'], kde=True)
plt.axvline(df['petal_width'].mean(), color='red')
plt.axvline(df['petal_width'].median(), color='green')
plt.axvline(df['petal_width'].mode()[0], color='blue')

# print the value of mean, median and mode of petal_width column
print('Mean:', df['petal_width'].mean())
print('Median:', df['petal_width'].median())
print('Mode:', df['petal_width'].mode()[0])

fig = px.histogram(data_frame=df, x='petal_width', color='species')
fig.show()

"""**species column**"""

df['species'].unique()

df['species'].nunique()

df['species'].value_counts()

"""**Dealing with missing values**"""

df.isnull().sum().sort_values(ascending = False)

"""**Dealing with outliers**"""

fig = px.box(data_frame=df, y='sepal_length')
fig.show()

fig = px.box(data_frame=df, y='sepal_width')
fig.show()

fig = px.box(data_frame=df, y='petal_length')
fig.show()

fig = px.box(data_frame=df, y='petal_width')
fig.show()

q1 = df['sepal_width'].quantile(0.25)
q3 = df['sepal_width'].quantile(0.75)
iqr = q3 - q1

# Calculate the LOF and UFO
lof = q1 - 1.5 * iqr
ufo = q3 + 1.5 * iqr
print(lof)
print(ufo)
# Identify the outliers
outliers1 = df[df['sepal_width'] < lof]
outliers2 = df[df['sepal_width'] > ufo]

# Combine the outliers using concat
outliers = pd.concat([outliers1, outliers2])

# Print the outliers
print(outliers)

sns.histplot(df['sepal_width'], kde=True)

"""**Model Selection and Evaluation**"""

X = df.drop('species', axis=1)
y = df['species']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20, random_state=42)

# Call the Model
model = RandomForestClassifier(random_state=42)

from sklearn.pipeline import Pipeline


# Create a pipeline for each model
pipeline = Pipeline([
    ('model', model)
    ])

# Perform cross-validation
scores = cross_val_score(pipeline, X_train, y_train, cv=5)

# Calculate mean accuracy
mean_accuracy = scores.mean()

# Fit the pipeline on the training data
pipeline.fit(X_train, y_train)

# Make predictions on the test data
y_pred = pipeline.predict(X_test)

# Calculate accuracy score
accuracy = accuracy_score(y_test, y_pred)

print("Model:", RandomForestClassifier())
print("Cross-validation Accuracy:", mean_accuracy)
print("Test Accuracy:", accuracy)

best_model = pipeline

# save the best model
import pickle
pickle.dump(best_model, open('iris_model.dot', 'wb'))

"""**Conclusion**
*   I chose a Random Forest model.
*   The test accuracy is 1.0, and the cross-validation accuracy is 0.94.














"""